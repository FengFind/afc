/* 
 * $Id$
 * 
 * Copyright (C) 2011-12 Stephane GALLAND This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package org.arakhne.maven.plugins.tagreplacer;

import java.io.File;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import org.apache.maven.plugin.MojoExecutionException;
import org.arakhne.maven.JavaSourceFileFilter;

/**
 * Generate the Java source files and replace the macros by the corresponding values
 * on the fly.
 * Supported macros are described in {@link AbstractReplaceMojo}.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * 
 * @goal generatesrc
 * @phase generate-sources
 * @requireProject true
 * @threadSafe
 */
public class GenerateSourceMojo extends AbstractReplaceMojo {

	/** Are the directories where the source files are located.
	 * By default, the directory "src/main/java" is used.
	 * 
	 * @parameter
	 */
	private File[] sources;

	/** Is the directory where the generated files are located.
	 * By default, the directory "target/generated-sources/java" is used.
	 * 
	 * @parameter
	 */
	private File outputLocation;
	
	/** Set of the files generated by the plugin.
	 * This set permits to not generate the file more than one time. 
	 */
	private final Set<File> generateTargets = new TreeSet<>();
	
	/** Set of the files inside the file system.
	 */
	private final Map<File,Map<File,File>> bufferedFiles = new TreeMap<>();
	
	/**
     * {@inheritDoc}
     */
	@Override
    protected final synchronized void executeMojo() throws MojoExecutionException {
		File targetDir = null;
		if (this.outputLocation==null) {
			targetDir = new File(getGeneratedSourceDirectory(), "java"); //$NON-NLS-1$
		}
		else {
			targetDir = this.outputLocation;
		}
		
		executeMojo(targetDir);
	}
	
	/**
     * Execute the replacement mojo inside the given target directory.
     * 
     * @param targetDir
	 * @throws MojoExecutionException 
     */
    protected synchronized void executeMojo(File targetDir) throws MojoExecutionException {
    	if (this.generateTargets.contains(targetDir) &&
    		targetDir.isDirectory()) {
    		getLog().debug("Skiping "+targetDir+" because is was already generated");  //$NON-NLS-1$//$NON-NLS-2$
    		return;
    	}
    	
    	this.generateTargets.add(targetDir);
    	
		File[] sourceDirs;
		File mainDirectory = new File(getSourceDirectory(), "main"); //$NON-NLS-1$
		if (this.sources==null || this.sources.length==0) {
			sourceDirs = new File[] {
					new File(mainDirectory, "java"), //$NON-NLS-1$
			};
		}
		else {
			sourceDirs = this.sources;
		}

		clearInternalBuffers();

		for(File sourceDir : sourceDirs) {
			Map<File,File> htmlBasedFiles = this.bufferedFiles.get(sourceDir);
	
			if (htmlBasedFiles==null) {
				htmlBasedFiles = new TreeMap<>();
	    		if ( sourceDir.isDirectory() ) {
	    			// Search for .java files
	    			findFiles(sourceDir, new JavaSourceFileFilter(), htmlBasedFiles);
	    		}
    			
				this.bufferedFiles.put(sourceDir, htmlBasedFiles);
    		}

			for(Entry<File,File> entry : htmlBasedFiles.entrySet()) {
				String baseFile = removePathPrefix(entry.getValue(), entry.getKey());
				replaceInFileBuffered(
						entry.getKey(),
						new File(targetDir, baseFile),
						ReplacementType.HTML,
						sourceDirs,
						false);
			}
		}
	}
    
}
